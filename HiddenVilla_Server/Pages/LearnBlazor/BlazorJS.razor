@page "/blazorjs"
@inject IJSRuntime JsRuntime
<h3>BlazorJS</h3>

<div class="row col-12">
    <button class="btn btn-secondary" @onclick="(()=>TestConfirmBox(ConfirmMessage))">Test Confirm Button</button>

</div>

<div class="row col-12">
    <button class="btn btn-success" @onclick="TestSuccess">Test Toastr Success</button>
    <button class="btn btn-danger" @onclick="TestFailure">Test Toastr Failure</button>

</div>


<div class="row mt-4 col-12">
    <button class="btn btn-success" @onclick="TestSuccessSwal">Test swal Success</button>
    <button class="btn btn-danger" @onclick="TestFailureSwal">Test swal Failure</button>

</div>

<div class="row col-12">
    @if (ConfirmResult)
    {
        <p style="color:green">Confirmation Confirmed</p>
    }
    else
    {
        <p style="color:red">Confirmation not Confirmed</p>
    }
</div>

@code {

    private string ConfirmMessage = "Are you sure you want to click?";
    public bool ConfirmResult { get; set; }

    private async Task TestConfirmBox(string message)
    {
        ConfirmResult = await JsRuntime.InvokeAsync<bool>("confirm", message);
    }
    private async Task TestSuccess()
    {
        await JsRuntime.ToastrSeccess("Success Message Display");
    }
    private async Task TestFailure()
    {
        await JsRuntime.ToastrError("Error Message Display");
    }


    private async Task TestSuccessSwal()
    {
        await JsRuntime.InvokeVoidAsync("ShowSwal","success","This is the success message");
    }
    private async Task TestFailureSwal()
    {
        await JsRuntime.InvokeVoidAsync("ShowSwal", "error", "This is the error message");
    }

}
