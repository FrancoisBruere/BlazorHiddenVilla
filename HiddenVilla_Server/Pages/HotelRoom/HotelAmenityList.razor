@page "/hotel-amenity"
@using Models
@using Business.Repository.IRepository
@inject IHotelAmenityRepository HotelAmenityRepository
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = Common.SD.Role_Admin)]

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Amenities</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hotel-amenity/create" class="btn btn-info form-control">New Amenity</NavLink>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr class="bg-light">
                    <th>Name</th>
                    <th>Timming</th>
                    <th>Icon</th>
                    <th>Edit/Delete</th>
                </tr>

            </thead>
            <tbody>
                @if (HotelAmenities.Any())
                {
                    foreach (var amenity in HotelAmenities)
                    {
                        <tr>
                            <td>@amenity.Name</td>
                            <td>@amenity.Timming</td>
                            <td><i class="@amenity.Icon"></i></td>
                            <td>
                                <NavLink href="@($"hotel-amenity/edit/{ amenity.Id }")" class="btn btn-outline-info">Edit</NavLink>
                                <button @onclick="()=>HandleAmenityDelete(amenity.Id)" class="btn btn-outline-danger">Delete</button>

                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">
                            No records found
                        </td>
                    </tr>
                }

            </tbody>

        </table>
    </div>
</div>

<DeleteConfirmation isParentProcessing="isProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@code {

    private IEnumerable<HotelAmenityDTO> HotelAmenities { get; set; } = new List<HotelAmenityDTO>();
    private int? deleteAmenityId { get; set; } = null;
    private bool isProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        HotelAmenities = await HotelAmenityRepository.GetAllHotelAmenities();
    }


    private async Task HandleAmenityDelete(int amenityId)
    {
        deleteAmenityId = amenityId;
        if (deleteAmenityId != 0)
        {

            await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModel");
        }


    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        isProcessing = true;

        if (isConfirmed && deleteAmenityId != 0)
        {
            HotelAmenityDTO AmenityDTO = await HotelAmenityRepository.GetHotelAmenity(deleteAmenityId.Value);
            await HotelAmenityRepository.DeleteHotelAmenity(deleteAmenityId.Value);
            await JsRuntime.ToastrSeccess("Amenity deleted successfully");
            HotelAmenities = await HotelAmenityRepository.GetAllHotelAmenities();

        }
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModel");
        isProcessing = false;

    }


}
