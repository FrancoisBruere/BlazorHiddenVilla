@page "/hotel-administration"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject IJSRuntime JsRuntime
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = Common.SD.Role_Admin)]

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Administration</h4>
    </div>
</div>
<div class="row col-12">
    <h4>Users</h4>
</div>

<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr class="bg-light">
                    <th>User Name</th>
                    <th>Email</th>
                    <th>Phone Number</th>
                    <th>Email Confirmed</th>
                    <th>Edit/Delete</th>
                </tr>

            </thead>
            <tbody>
                @if (UsersList.Any())
                {
                    foreach (var user in UsersList)
                    {
                        <tr>

                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>@user.PhoneNumber</td>
                            <td>@user.EmailConfirmed</td>
                            <td>
                                @*<NavLink href="@($"hotel-administration/edit/{ user.Id }")" class="btn btn-outline-info">Edit</NavLink>*@
                                <button class="btn btn-outline-danger" @onclick="()=>HandleDelete(user.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">
                            No records found
                        </td>
                    </tr>
                }

            </tbody>

        </table>
    </div>
</div>
<hr />
<div class="row mt-4">
    <div class="col-8">
        <h4>Roles</h4>
    </div>
    <div class="col-3 offset-1">
        @*<NavLink href="hotel-administration/create" class="btn btn-info form-control">New Role</NavLink>*@
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr class="bg-light">
                    <th>Name</th>
                    <th>Edit/Delete</th>
                </tr>

            </thead>
            <tbody>
                @if (RolesList.Any())
                {
                    foreach (var role in RolesList)
                    {
                        <tr>

                            <td>@role.Name</td>
                            <td>
                                <button class="btn btn-outline-danger" @onclick="()=>HandleRoleDelete(role.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">
                            No records found
                        </td>
                    </tr>
                }

            </tbody>

        </table>
    </div>
</div>

<DeleteConfirmation isParentProcessing="isProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@code {

    List<IdentityUser> UsersList = new List<IdentityUser>();
    List<IdentityRole> RolesList = new List<IdentityRole>();

    private string DeleteUserId { get; set; } = null;
    private string DeleteRoleId { get; set; } = null;
    private bool isProcessing { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        HandleGetAllUsers();
        HandleGetRoles();
    }

    public void HandleGetAllUsers()
    {
        if (UsersList.Count != 0)
            UsersList = new List<IdentityUser>();

        var user = _UserManager.Users.Select(x => new IdentityUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            PhoneNumber = x.PhoneNumber,
            EmailConfirmed = x.EmailConfirmed
        });

        foreach (var item in user)
        {
            UsersList.Add(item);

        }

    }

    public void HandleGetRoles()
    {
        if (RolesList.Count != 0)
            RolesList = new List<IdentityRole>();

        var roles = _RoleManager.Roles.Select(x => new IdentityRole
        {
            Id = x.Id,
            Name = x.Name

        });

        foreach (var item in roles)
        {
            RolesList.Add(item);

        }

    }

    private async Task HandleDelete(string deleteId)
    {
        DeleteUserId = deleteId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModel");

    }

    private async Task HandleRoleDelete(string deleteId)
    {
        DeleteRoleId = deleteId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModel");

    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {

        isProcessing = true;
        var role = await _RoleManager.FindByIdAsync(DeleteRoleId);
        var user = await _UserManager.FindByIdAsync(DeleteUserId);

        if (role != null && isProcessing == true)
        {
            await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModel");
            await _RoleManager.DeleteAsync(role);
            await JsRuntime.ToastrSeccess("Hotel Room Deleted successfully");
        }


        if (user != null && isProcessing == true)
        {
            // Delete the user
            await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModel");
            await _UserManager.DeleteAsync(user);
            await JsRuntime.ToastrSeccess("Hotel Room Deleted successfully");

        }
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModel");
        isProcessing = false;
        HandleGetAllUsers();
        HandleGetRoles();


    }

}
