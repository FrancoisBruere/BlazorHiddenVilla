@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models
@using Business.Repository.IRepository
@using HiddenVilla_Server.Service.IService
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelImageRepository HotelImageRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info md-3 ml-1 col-12">@Title Hotel Room</h3>
    <div class="card col-12">
        <div class="card-body">
            <EditForm Model="HotelRoomModel" OnValidSubmit="HandelHotelRoomUpsert">
                <DataAnnotationsValidator/>
                @*<ValidationSummary/>*@
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="HotelRoomModel.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>HotelRoomModel.Name"/>
                </div>
                <div class="form-group">
                    <label>Occupancy</label>
                    <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control"></InputNumber>
                    <ValidationMessage For="()=>HotelRoomModel.Occupancy" />
                </div>
                <div class="form-group">
                    <label>Regular Rate</label>
                    <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control"></InputNumber>
                    <ValidationMessage For="()=>HotelRoomModel.RegularRate" />
                </div>
                <div class="form-group">
                    <label>Square Feet</label>
                    <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control"></InputText>
                </div>
                <div class="form-group">
                    <label>Details</label>
                    <InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>
                </div>
                <div class="form-group">
                    <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                    <div class="row">
                        @if (IsImageUploadProcessStarted)
                        {
                        <div class="col-md-12">
                            <span><i class="fa fa-spin fa-spinner"></i>Please wait...Images are uploading</span>
                        </div>
                        }
                        @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                        {
                            int serial = 1;

                            foreach (var roomImage in HotelRoomModel.ImageUrls)
                            {
                        <div class="col-md-2 mt-3">
                            <div class="room-image" style="background: url('@roomImage') 50% 50%; "></div>
                            <span class="room-image-title">@serial</span>


                            <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                Delete
                            </button>
                        </div>
                                serial++;
                            }
                        }
                    </div>
                </div>
                <div class="form-group">
                    <button class="btn btn-primary">@Title Room</button>
                    <NavLink href="hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                </div>

            </EditForm>
        </div>
    </div>

</div>

@code {

    [Parameter]
    public int? Id { get; set; }

    private HotelRoomDTO HotelRoomModel { get; set; } = new HotelRoomDTO();
    private string Title { get; set; } = "Create";
    private HotelRoomImageDTO RoomImageModel { get; set; } = new HotelRoomImageDTO(); //for adding images
    private List<string> DeletedImageNames { get; set; } = new List<string>(); //edit keep track of images to be deleted

    private bool IsImageUploadProcessStarted { get; set; } = false;

  
    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //updating
            Title = "Update";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);

            // images displayed on edit room

            if (HotelRoomModel?.HotelRoomImages !=null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }



        }
        else
        {
            HotelRoomModel = new HotelRoomDTO();
            //creating
        }
    }

    private async Task HandelHotelRoomUpsert()
    {

        var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);

        if (roomDetailsByName != null)
        {
            await JsRuntime.ToastrError("Room name already exist");
            return;
        }

        try
        {
            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                // this is update
                var updateResults = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                // adding additional images to a hotelroom

                if ((HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                    || (DeletedImageNames != null && DeletedImageNames.Any()))
                {
                    if (DeletedImageNames != null && DeletedImageNames.Any()) // check if images to delete
                    {
                        foreach (var deletedImageName in DeletedImageNames)
                        {
                            var imageName = deletedImageName.Replace($"RoomImages/", "");

                            var result = FileUpload.DeleteFile(imageName);
                            await HotelImageRepository.DeleteHotelRoomImageByImageUrl(deletedImageName);

                        }
                    }
                    await AddHotelRoomImage(updateResults);
                    
                }



                await JsRuntime.ToastrSeccess("Hotel Room Update Successfully");
            }
            else
            {
                // new create room /add hotelroom images path
                var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel); //pass DTO in form created to CreateHotelRoom method

                await AddHotelRoomImage(createdResult); // for images calling local method 

                await JsRuntime.ToastrSeccess("Hotel Room Created Successfully");
            }

        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
            //log exceptoins
        }

        NavigationManager.NavigateTo("hotel-room");



    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {

                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower()==".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {

                        var uploadedImagePath = await FileUpload.UploadFile(file); //upload file into path / folder
                        images.Add(uploadedImagePath); // adds path to list images to be displayed to user as uploaded images 
                        
                        
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Please seletect .jpg .png .jpeg files only");

                    }
                }

            }
            if (images.Any()) // imagelist should have something // adding urls 
            {
                if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any()) //check if any images in list
                {
                    // if so then add images
                    HotelRoomModel.ImageUrls.AddRange(images);
                }
                else
                {
                    // if not then its the first upload and initialize the list then add
                    HotelRoomModel.ImageUrls = new List<string>();
                    HotelRoomModel.ImageUrls.AddRange(images);

                }

            }
            else //if nothing in list display error using toastr
            {
                await JsRuntime.ToastrError("Image uploading failed!");
                return;
            }
            IsImageUploadProcessStarted = false;

        }
        catch (Exception ex)
        {

            await JsRuntime.ToastrError(ex.Message);
        }
    }


    private async Task AddHotelRoomImage(HotelRoomDTO roomDetails) // for image upload - save
    {

        foreach (var imageUrl in HotelRoomModel.ImageUrls)
        {
            if (HotelRoomModel.HotelRoomImages == null || HotelRoomModel.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count()==0) //adds only new image/urls to DB
            {
                RoomImageModel = new HotelRoomImageDTO()
                {

                    RoomId = roomDetails.Id,
                    RoomImageUrl = imageUrl
                };
                await HotelImageRepository.CreateHotelRoomImage(RoomImageModel);

            }


        }
    }

    internal async Task DeletePhoto(string imageUrl)
    {
        try
        {
            //create
            var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl); // find index of image
            var imageName = imageUrl.Replace($"RoomImages/", ""); // get the file name by replacing foler with nothing

            if (HotelRoomModel.Id == 0 && Title=="Create")
            {
                // remove image from RoomImages folder

                var result = FileUpload.DeleteFile(imageName);

            }
            else
            {
                //edit / update remove immages
                DeletedImageNames ??= new List<string>();
                DeletedImageNames.Add(imageUrl);


            }
            HotelRoomModel.ImageUrls.RemoveAt(imageIndex);



        }
        catch (Exception ex)
        {

            await JsRuntime.ToastrError(ex.Message);
        }

    }

  
}
